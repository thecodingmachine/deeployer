# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

name: "Continuous Integration"

on:
  - "pull_request"
  - "push"

jobs:

  continuous-integration:
    name: "Continuous Integration"

    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.0.0"

      - name: "Download JSONNET"
        run: |
          curl -o jsonnet.tar.gz -L https://github.com/google/jsonnet/releases/download/v0.15.0/jsonnet-bin-v0.15.0-linux.tar.gz
          tar xvzf jsonnet.tar.gz
          chmod +x jsonnet
          chmod +x jsonnetfmt
          sudo mv jsonnet /usr/local/bin/jsonnet
          sudo mv jsonnetfmt /usr/local/bin/jsonnetfmt
          rm jsonnet.tar.gz

      - name: "Install Tanka"
        run: |
          sudo curl -fSL -o "/usr/local/bin/tk" "https://github.com/grafana/tanka/releases/download/v0.9.0/tk-linux-amd64"
          sudo chmod a+x "/usr/local/bin/tk"

      - name: "Install Kubeval"
        run: |
          curl -fSL -o kubeval-linux-amd64.tar.gz https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin

      - name: "Install node"
        uses: actions/setup-node@v1
        with:
          node-version: '12.14.0'

      - name: "Install ajv"
        run: npm install -g ajv-cli

      - name: "Install jsonlint"
        run: npm install jsonlint -g

      - name: "Download JB"
        run: |
          curl -o jb -L https://github.com/jsonnet-bundler/jsonnet-bundler/releases/download/v0.3.1/jb-linux-amd64
          chmod +x jb
          sudo mv jb /usr/local/bin/jb

      - name: "Install dependencies"
        run: jb install

      - name: "Run tests"
        run: ./run_tests.sh
        working-directory: "tests"

      - name: "Validating JSON & *SONNET files"
        run: ./validator.sh

      - name: "Check coding style in deeployer lib"
        run: jsonnetfmt --test *.*sonnet ||true
        working-directory: "lib/deeployer"

  build-and-test:
    name: "Build and test"

    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.0.0"

      - name: "Build"
        run: docker build -t thecodingmachine/deeployer:latest .

      - name: "Test image"
        run: docker run --rm -e "JSON_ENV={}" -v $(pwd):/var/app thecodingmachine/deeployer:latest deeployer-k8s show tests/host.json
